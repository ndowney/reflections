-What happens when you initialize a repository? Why do you need to do it?

Git creates all the behind the scenes stuff needed for the repository, and makes it possible to add files to be tracked through commits.  This does not exist in every directory, so we have to setup git on those directories to be tracked.

-How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is intermediate between the two, it allows you to only commit certain files from a directory, but also allows you to add them one at a time so you can be sure a single commit contains everything it should.  It also allows you to double check that you are commiting what you want before you pull the trigger.  This behavior is valuable because it helps prevent mistakes.

-How can you use the staging area to make sure you have one commit per logical change?

By looking at the files in the staging area and using git diff --staged you can examine the changes to see if they are all related or not.

-What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If I were to add changes to a project that were not yet fully functional, i would want to keep those changes separate from the main branch so that i do not break functionality for other users.  Branches make it possible to do this.  Also, I could implement a quick an dirty change in the main branch, but in the meanwhile make a better fix on a branch to replace my earlier hasty code.

-How do the diagrams help you visualize the branch structure?

By showing directly which commits are related to each other and which are not.  It can also tell me which branches have yet to be merged easily.

-What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Features from different branches get combined into a single branch wih all the features of all merged branches.  The diagram shows which commit worked on what to show exactly which changes were made to achieve a particular result.

-What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Auto merging saves time, a lot of time, since it can automatically combine a lot of changes that would be tedious to analyse manually.  However, manual merges make sure that changes to the code are done in ways that are logically consistent and follows design exactly.  I think that there could be ways that bugs could creep in if you only do auto merges


